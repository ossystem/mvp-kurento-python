#!/usr/bin/env python
import cv2
import json
import logging
import numpy as np
import os
import ssl
import struct
import sys
import time
import threading
import websocket


logging.basicConfig(filename='/tmp/pyecho.log',level=logging.INFO)

HEADER_SIZE = 16
DATA = {
    'Label1_val': 1,
    'Label2_val': 2,
    'Label3_val': 'three',
    'Label4_val': 4,
    'Label5_val': 5,
    'Label6_val': 6.0,
    'ts': time.time()
}
session_id = sys.argv[1]
ws = None


def handle_exception(exc_type, exc_value, exc_traceback):
    logging.exception('{} -- {}'.format(exc_type, exc_value))

def ws_on_message(ws, data):
    msg = json.loads(data)

    assert msg.get('key'), 'broken control packet. key not specified'

    DATA[msg.get('key')] = msg.get('value')

def process_frame(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # some detection logic
    frame = cv2.cvtColor(gray, cv2.COLOR_GRAY2BGRA)

    ws.send(json.dumps({
        'id': 'data',
        'to': session_id,
        'data': DATA
    }))

    return frame


if __name__ == '__main__':
    sys.excepthook = handle_exception

    websocket.enableTrace(True)
    ws = websocket.WebSocketApp(
        os.environ['WS_DATA_ENDPOINT'],
        on_message=ws_on_message,
    )
    wst = threading.Thread(target=ws.run_forever, kwargs={'sslopt':{'cert_reqs': ssl.CERT_NONE}})
    wst.daemon = True
    wst.start()

    ws_conn_timeout = 3
    while ws.sock is None or not ws.sock.connected and ws_conn_timeout:
        time.sleep(1)
        ws_conn_timeout -= 1

    # tie encoder to streaming user. let user know that encoder alive
    ws.send(json.dumps({
        'id': 'encoder',
        'to': session_id,
    }))

    data = b""
    while True:
        data += sys.stdin.read(HEADER_SIZE)

        header = data[:HEADER_SIZE]
        data = data[HEADER_SIZE:]

        width, height, bps, length = struct.unpack('iiii', header)
        empty_frame = np.zeros((height, width, bps))

        logging.info('got frame header. width is {}, height is {}, bytes per '
                         'pixel is {}, frame length is {}'
                         .format(width, height, bps, length))

        while len(data) < length:
            chunk = sys.stdin.read(HEADER_SIZE)
            data += chunk

        logging.debug('buffer {}'.format(len(data)))
        raw_frame = data[:length]
        logging.debug('frame {}'.format(len(raw_frame)))

        try:
            data = data[length:]
            frame = np.frombuffer(raw_frame, dtype=np.uint8).reshape(empty_frame.shape)
            logging.debug('read np array')

            logging.debug('going to process frame')
            frame = process_frame(frame)
            logging.debug('processed frame')
        except:
            logging.error('something went wrong while processing frame')

        if frame is not None:
            out_data = frame.tobytes()
        else:
            logging.warning('broken frame. sending out original one')
            out_data = raw_frame

        try:
            sys.stdout.write(out_data)
            sys.stdout.flush()
        except:
            logging.error('something went wrong while writing to stdout')
